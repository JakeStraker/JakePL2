<?xml version='1.0' encoding='UTF-8'?>
<DEFECTS><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1754</LINE><COLUMN>39</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::detail::getPlatformVersion</FUNCTION><DECORATED>?getPlatformVersion@detail@cl@@YAIPEAU_cl_platform_id@@@Z</DECORATED><FUNCLINE>1750</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2115</LINE><COLUMN>50</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Device::createSubDevices</FUNCTION><DECORATED>?createSubDevices@Device@cl@@QEAAHPEB_JPEAV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@@Z</DECORATED><FUNCLINE>2105</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2233</LINE><COLUMN>50</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Platform::getDevices</FUNCTION><DECORATED>?getDevices@Platform@cl@@QEBAH_KPEAV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@@Z</DECORATED><FUNCLINE>2220</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2338</LINE><COLUMN>54</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Platform::get</FUNCTION><DECORATED>?get@Platform@cl@@SAHPEAV?$vector@VPlatform@cl@@V?$allocator@VPlatform@cl@@@std@@@std@@@Z</DECORATED><FUNCLINE>2324</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2367</LINE><COLUMN>54</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Platform::get</FUNCTION><DECORATED>?get@Platform@cl@@SAHPEAV12@@Z</DECORATED><FUNCLINE>2353</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2396</LINE><COLUMN>54</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Platform::get</FUNCTION><DECORATED>?get@Platform@cl@@SA?AV12@PEAH@Z</DECORATED><FUNCLINE>2382</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2485</LINE><COLUMN>56</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Context::{ctor}</FUNCTION><DECORATED>??0Context@cl@@QEAA@AEBV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@PEA_JP6AXPEBDPEBX_KPEAX@Z5PEAH@Z</DECORATED><FUNCLINE>2471</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2487</LINE><COLUMN>35</COLUMN></SFA><DEFECTCODE>6386</DEFECTCODE><DESCRIPTION>Buffer overrun while writing to 'deviceIDs':  the writable size is 'numDevices*sizeof(_cl_device_id *)' bytes, but '16' bytes might be written.</DESCRIPTION><FUNCTION>cl::Context::{ctor}</FUNCTION><DECORATED>??0Context@cl@@QEAA@AEBV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@PEA_JP6AXPEBDPEBX_KPEAX@Z5PEAH@Z</DECORATED><FUNCLINE>2471</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2481</LINE><COLUMN>4</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2482</LINE><COLUMN>15</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2484</LINE><COLUMN>17</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2485</LINE><COLUMN>20</COLUMN><KEYEVENT><ID>1</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'deviceIDs' is a 0 byte array</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2486</LINE><COLUMN>22</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2486</LINE><COLUMN>51</COLUMN><KEYEVENT><ID>2</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'deviceIndex&lt;numDevices')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2487</LINE><COLUMN>35</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2486</LINE><COLUMN>65</COLUMN><KEYEVENT><ID>3</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'deviceIndex' may equal 1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2486</LINE><COLUMN>51</COLUMN><KEYEVENT><ID>4</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Continue this loop, (assume 'deviceIndex&lt;numDevices')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2487</LINE><COLUMN>35</COLUMN><KEYEVENT><ID>5</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'deviceIndex' is an In/Out argument to 'std::vector&lt;cl::Device,std::allocator&lt;cl::Device&gt; &gt;::[]' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1211)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2487</LINE><COLUMN>35</COLUMN><KEYEVENT><ID>6</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>Invalid write to 'deviceIDs', (outside its writable range)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>2766</LINE><COLUMN>22</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Context::getSupportedImageFormats</FUNCTION><DECORATED>?getSupportedImageFormats@Context@cl@@QEBAH_KIPEAV?$vector@UImageFormat@cl@@V?$allocator@UImageFormat@cl@@@std@@@std@@@Z</DECORATED><FUNCLINE>2742</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5073</LINE><COLUMN>46</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Program::{ctor}</FUNCTION><DECORATED>??0Program@cl@@QEAA@AEBVContext@1@AEBV?$vector@U?$pair@PEBD_K@std@@V?$allocator@U?$pair@PEBD_K@std@@@2@@std@@PEAH@Z</DECORATED><FUNCLINE>5065</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5074</LINE><COLUMN>52</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Program::{ctor}</FUNCTION><DECORATED>??0Program@cl@@QEAA@AEBVContext@1@AEBV?$vector@U?$pair@PEBD_K@std@@V?$allocator@U?$pair@PEBD_K@std@@@2@@std@@PEAH@Z</DECORATED><FUNCLINE>5065</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5078</LINE><COLUMN>23</COLUMN></SFA><DEFECTCODE>6386</DEFECTCODE><DESCRIPTION>Buffer overrun while writing to 'lengths':  the writable size is 'n*sizeof(size_t)' bytes, but '16' bytes might be written.</DESCRIPTION><FUNCTION>cl::Program::{ctor}</FUNCTION><DECORATED>??0Program@cl@@QEAA@AEBVContext@1@AEBV?$vector@U?$pair@PEBD_K@std@@V?$allocator@U?$pair@PEBD_K@std@@@2@@std@@PEAH@Z</DECORATED><FUNCLINE>5065</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5069</LINE><COLUMN>4</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5070</LINE><COLUMN>15</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5072</LINE><COLUMN>23</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5073</LINE><COLUMN>16</COLUMN><KEYEVENT><ID>1</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'lengths' is a 0 byte array</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5074</LINE><COLUMN>18</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5076</LINE><COLUMN>22</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5076</LINE><COLUMN>31</COLUMN><KEYEVENT><ID>2</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'i&lt;n')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5077</LINE><COLUMN>23</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5078</LINE><COLUMN>23</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5076</LINE><COLUMN>36</COLUMN><KEYEVENT><ID>3</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'i' may equal 1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5076</LINE><COLUMN>31</COLUMN><KEYEVENT><ID>4</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Continue this loop, (assume 'i&lt;n')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5077</LINE><COLUMN>23</COLUMN><KEYEVENT><ID>5</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'i' is an In/Out argument to 'std::vector&lt;std::pair&lt;char const *,unsigned __int64&gt;,std::allocator&lt;std::pair&lt;char const *,unsigned __int64&gt; &gt; &gt;::[]' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1211)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5078</LINE><COLUMN>23</COLUMN><KEYEVENT><ID>6</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'i' is an In/Out argument to 'std::vector&lt;std::pair&lt;char const *,unsigned __int64&gt;,std::allocator&lt;std::pair&lt;char const *,unsigned __int64&gt; &gt; &gt;::[]' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1211)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5078</LINE><COLUMN>23</COLUMN><KEYEVENT><ID>7</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>Invalid write to 'lengths', (outside its writable range)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5077</LINE><COLUMN>23</COLUMN></SFA><DEFECTCODE>6386</DEFECTCODE><DESCRIPTION>Buffer overrun while writing to 'strings':  the writable size is 'n*sizeof(const char *)' bytes, but '16' bytes might be written.</DESCRIPTION><FUNCTION>cl::Program::{ctor}</FUNCTION><DECORATED>??0Program@cl@@QEAA@AEBVContext@1@AEBV?$vector@U?$pair@PEBD_K@std@@V?$allocator@U?$pair@PEBD_K@std@@@2@@std@@PEAH@Z</DECORATED><FUNCLINE>5065</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5069</LINE><COLUMN>4</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5070</LINE><COLUMN>15</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5072</LINE><COLUMN>23</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5073</LINE><COLUMN>16</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5074</LINE><COLUMN>18</COLUMN><KEYEVENT><ID>1</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'strings' is a 0 byte array</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5076</LINE><COLUMN>22</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5076</LINE><COLUMN>31</COLUMN><KEYEVENT><ID>2</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'i&lt;n')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5077</LINE><COLUMN>23</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5078</LINE><COLUMN>23</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5076</LINE><COLUMN>36</COLUMN><KEYEVENT><ID>3</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'i' may equal 1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5076</LINE><COLUMN>31</COLUMN><KEYEVENT><ID>4</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Continue this loop, (assume 'i&lt;n')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5077</LINE><COLUMN>23</COLUMN><KEYEVENT><ID>5</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'i' is an In/Out argument to 'std::vector&lt;std::pair&lt;char const *,unsigned __int64&gt;,std::allocator&lt;std::pair&lt;char const *,unsigned __int64&gt; &gt; &gt;::[]' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1211)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5077</LINE><COLUMN>23</COLUMN><KEYEVENT><ID>6</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>Invalid write to 'strings', (outside its writable range)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5130</LINE><COLUMN>46</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Program::{ctor}</FUNCTION><DECORATED>??0Program@cl@@QEAA@AEBVContext@1@AEBV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@AEBV?$vector@U?$pair@PEBX_K@std@@V?$allocator@U?$pair@PEBX_K@std@@@2@@4@PEAV?$vector@HV?$allocator@H@std@@@4@PEAH@Z</DECORATED><FUNCLINE>5109</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5131</LINE><COLUMN>69</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Program::{ctor}</FUNCTION><DECORATED>??0Program@cl@@QEAA@AEBVContext@1@AEBV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@AEBV?$vector@U?$pair@PEBX_K@std@@V?$allocator@U?$pair@PEBX_K@std@@@2@@4@PEAV?$vector@HV?$allocator@H@std@@@4@PEAH@Z</DECORATED><FUNCLINE>5109</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5138</LINE><COLUMN>56</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Program::{ctor}</FUNCTION><DECORATED>??0Program@cl@@QEAA@AEBVContext@1@AEBV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@AEBV?$vector@U?$pair@PEBX_K@std@@V?$allocator@U?$pair@PEBX_K@std@@@2@@4@PEAV?$vector@HV?$allocator@H@std@@@4@PEAH@Z</DECORATED><FUNCLINE>5109</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5134</LINE><COLUMN>22</COLUMN></SFA><DEFECTCODE>6386</DEFECTCODE><DESCRIPTION>Buffer overrun while writing to 'images':  the writable size is 'numDevices*sizeof(const unsigned char **)' bytes, but '16' bytes might be written.</DESCRIPTION><FUNCTION>cl::Program::{ctor}</FUNCTION><DECORATED>??0Program@cl@@QEAA@AEBVContext@1@AEBV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@AEBV?$vector@U?$pair@PEBX_K@std@@V?$allocator@U?$pair@PEBX_K@std@@@2@@4@PEAV?$vector@HV?$allocator@H@std@@@4@PEAH@Z</DECORATED><FUNCLINE>5109</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5115</LINE><COLUMN>4</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5116</LINE><COLUMN>15</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5118</LINE><COLUMN>23</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5121</LINE><COLUMN>27</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5130</LINE><COLUMN>16</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5131</LINE><COLUMN>27</COLUMN><KEYEVENT><ID>1</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'images' is a 0 byte array</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5133</LINE><COLUMN>22</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5133</LINE><COLUMN>31</COLUMN><KEYEVENT><ID>2</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'i&lt;numDevices')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5134</LINE><COLUMN>22</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5135</LINE><COLUMN>23</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5133</LINE><COLUMN>45</COLUMN><KEYEVENT><ID>3</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'i' may equal 1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5133</LINE><COLUMN>31</COLUMN><KEYEVENT><ID>4</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Continue this loop, (assume 'i&lt;numDevices')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5134</LINE><COLUMN>22</COLUMN><KEYEVENT><ID>5</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'i' is an In/Out argument to 'std::vector&lt;std::pair&lt;void const *,unsigned __int64&gt;,std::allocator&lt;std::pair&lt;void const *,unsigned __int64&gt; &gt; &gt;::[]' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1211)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5134</LINE><COLUMN>22</COLUMN><KEYEVENT><ID>6</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>Invalid write to 'images', (outside its writable range)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5135</LINE><COLUMN>23</COLUMN></SFA><DEFECTCODE>6386</DEFECTCODE><DESCRIPTION>Buffer overrun while writing to 'lengths':  the writable size is 'numDevices*sizeof(size_t)' bytes, but '16' bytes might be written.</DESCRIPTION><FUNCTION>cl::Program::{ctor}</FUNCTION><DECORATED>??0Program@cl@@QEAA@AEBVContext@1@AEBV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@AEBV?$vector@U?$pair@PEBX_K@std@@V?$allocator@U?$pair@PEBX_K@std@@@2@@4@PEAV?$vector@HV?$allocator@H@std@@@4@PEAH@Z</DECORATED><FUNCLINE>5109</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5115</LINE><COLUMN>4</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5116</LINE><COLUMN>15</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5118</LINE><COLUMN>23</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5121</LINE><COLUMN>27</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5130</LINE><COLUMN>16</COLUMN><KEYEVENT><ID>1</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'lengths' is a 0 byte array</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5131</LINE><COLUMN>27</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5133</LINE><COLUMN>22</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5133</LINE><COLUMN>31</COLUMN><KEYEVENT><ID>2</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'i&lt;numDevices')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5134</LINE><COLUMN>22</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5135</LINE><COLUMN>23</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5133</LINE><COLUMN>45</COLUMN><KEYEVENT><ID>3</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'i' may equal 1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5133</LINE><COLUMN>31</COLUMN><KEYEVENT><ID>4</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Continue this loop, (assume 'i&lt;numDevices')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5134</LINE><COLUMN>22</COLUMN><KEYEVENT><ID>5</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'i' is an In/Out argument to 'std::vector&lt;std::pair&lt;void const *,unsigned __int64&gt;,std::allocator&lt;std::pair&lt;void const *,unsigned __int64&gt; &gt; &gt;::[]' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1211)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5135</LINE><COLUMN>23</COLUMN><KEYEVENT><ID>6</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'i' is an In/Out argument to 'std::vector&lt;std::pair&lt;void const *,unsigned __int64&gt;,std::allocator&lt;std::pair&lt;void const *,unsigned __int64&gt; &gt; &gt;::[]' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1211)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5135</LINE><COLUMN>23</COLUMN><KEYEVENT><ID>7</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>Invalid write to 'lengths', (outside its writable range)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5176</LINE><COLUMN>56</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Program::{ctor}</FUNCTION><DECORATED>??0Program@cl@@QEAA@AEBVContext@1@AEBV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@PEAH@Z</DECORATED><FUNCLINE>5166</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5178</LINE><COLUMN>35</COLUMN></SFA><DEFECTCODE>6386</DEFECTCODE><DESCRIPTION>Buffer overrun while writing to 'deviceIDs':  the writable size is 'numDevices*sizeof(_cl_device_id *)' bytes, but '16' bytes might be written.</DESCRIPTION><FUNCTION>cl::Program::{ctor}</FUNCTION><DECORATED>??0Program@cl@@QEAA@AEBVContext@1@AEBV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@4@PEAH@Z</DECORATED><FUNCLINE>5166</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5171</LINE><COLUMN>4</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5172</LINE><COLUMN>15</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5175</LINE><COLUMN>17</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5176</LINE><COLUMN>20</COLUMN><KEYEVENT><ID>1</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'deviceIDs' is a 0 byte array</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5177</LINE><COLUMN>22</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5177</LINE><COLUMN>51</COLUMN><KEYEVENT><ID>2</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'deviceIndex&lt;numDevices')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5178</LINE><COLUMN>35</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5177</LINE><COLUMN>65</COLUMN><KEYEVENT><ID>3</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'deviceIndex' may equal 1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5177</LINE><COLUMN>51</COLUMN><KEYEVENT><ID>4</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Continue this loop, (assume 'deviceIndex&lt;numDevices')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5178</LINE><COLUMN>35</COLUMN><KEYEVENT><ID>5</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'deviceIndex' is an In/Out argument to 'std::vector&lt;cl::Device,std::allocator&lt;cl::Device&gt; &gt;::[]' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1211)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5178</LINE><COLUMN>35</COLUMN><KEYEVENT><ID>6</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>Invalid write to 'deviceIDs', (outside its writable range)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5242</LINE><COLUMN>56</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Program::build</FUNCTION><DECORATED>?build@Program@cl@@QEBAHAEBV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@PEBDP6AXPEAU_cl_program@@PEAX@Z3@Z</DECORATED><FUNCLINE>5235</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5244</LINE><COLUMN>35</COLUMN></SFA><DEFECTCODE>6386</DEFECTCODE><DESCRIPTION>Buffer overrun while writing to 'deviceIDs':  the writable size is 'numDevices*sizeof(_cl_device_id *)' bytes, but '16' bytes might be written.</DESCRIPTION><FUNCTION>cl::Program::build</FUNCTION><DECORATED>?build@Program@cl@@QEBAHAEBV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@PEBDP6AXPEAU_cl_program@@PEAX@Z3@Z</DECORATED><FUNCLINE>5235</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5241</LINE><COLUMN>17</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5242</LINE><COLUMN>20</COLUMN><KEYEVENT><ID>1</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'deviceIDs' is a 0 byte array</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5243</LINE><COLUMN>22</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5243</LINE><COLUMN>51</COLUMN><KEYEVENT><ID>2</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'deviceIndex&lt;numDevices')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5244</LINE><COLUMN>35</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5243</LINE><COLUMN>65</COLUMN><KEYEVENT><ID>3</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'deviceIndex' may equal 1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5243</LINE><COLUMN>51</COLUMN><KEYEVENT><ID>4</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Continue this loop, (assume 'deviceIndex&lt;numDevices')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5244</LINE><COLUMN>35</COLUMN><KEYEVENT><ID>5</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'deviceIndex' is an In/Out argument to 'std::vector&lt;cl::Device,std::allocator&lt;cl::Device&gt; &gt;::[]' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1211)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5244</LINE><COLUMN>35</COLUMN><KEYEVENT><ID>6</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>Invalid write to 'deviceIDs', (outside its writable range)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5348</LINE><COLUMN>40</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::Program::createKernels</FUNCTION><DECORATED>?createKernels@Program@cl@@QEAAHPEAV?$vector@VKernel@cl@@V?$allocator@VKernel@cl@@@std@@@std@@@Z</DECORATED><FUNCLINE>5340</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5406</LINE><COLUMN>48</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::linkProgram</FUNCTION><DECORATED>?linkProgram@cl@@YA?AVProgram@1@V?$vector@VProgram@cl@@V?$allocator@VProgram@cl@@@std@@@std@@PEBDP6AXPEAU_cl_program@@PEAX@Z3PEAH@Z</DECORATED><FUNCLINE>5397</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5410</LINE><COLUMN>22</COLUMN></SFA><DEFECTCODE>6386</DEFECTCODE><DESCRIPTION>Buffer overrun while writing to 'programs':  the writable size is 'inputPrograms.size()*sizeof(_cl_program *)' bytes, but '16' bytes might be written.</DESCRIPTION><FUNCTION>cl::linkProgram</FUNCTION><DECORATED>?linkProgram@cl@@YA?AVProgram@1@V?$vector@VProgram@cl@@V?$allocator@VProgram@cl@@@std@@@std@@PEBDP6AXPEAU_cl_program@@PEAX@Z3PEAH@Z</DECORATED><FUNCLINE>5397</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5404</LINE><COLUMN>11</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5406</LINE><COLUMN>15</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5408</LINE><COLUMN>17</COLUMN><KEYEVENT><ID>1</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'programs' may be NULL (Enter this branch)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5409</LINE><COLUMN>26</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5409</LINE><COLUMN>35</COLUMN><KEYEVENT><ID>2</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'i&lt;inputPrograms.size()')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5410</LINE><COLUMN>22</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5409</LINE><COLUMN>60</COLUMN><KEYEVENT><ID>3</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'i' may equal 1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5409</LINE><COLUMN>35</COLUMN><KEYEVENT><ID>4</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Continue this loop, (assume 'i&lt;inputPrograms.size()')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5410</LINE><COLUMN>22</COLUMN><KEYEVENT><ID>5</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'i' is an In/Out argument to 'std::vector&lt;cl::Program,std::allocator&lt;cl::Program&gt; &gt;::[]' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1227)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>5410</LINE><COLUMN>22</COLUMN><KEYEVENT><ID>6</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>Invalid write to 'programs', (outside its writable range)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6300</LINE><COLUMN>61</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::CommandQueue::enqueueMigrateMemObjects</FUNCTION><DECORATED>?enqueueMigrateMemObjects@CommandQueue@cl@@QEAAHAEBV?$vector@VMemory@cl@@V?$allocator@VMemory@cl@@@std@@@std@@_KPEBV?$vector@VEvent@cl@@V?$allocator@VEvent@cl@@@std@@@4@PEAVEvent@2@@Z</DECORATED><FUNCLINE>6291</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6302</LINE><COLUMN>31</COLUMN></SFA><DEFECTCODE>6386</DEFECTCODE><DESCRIPTION>Buffer overrun while writing to 'localMemObjects':  the writable size is 'memObjects.size()*sizeof(_cl_mem *)' bytes, but '16' bytes might be written.</DESCRIPTION><FUNCTION>cl::CommandQueue::enqueueMigrateMemObjects</FUNCTION><DECORATED>?enqueueMigrateMemObjects@CommandQueue@cl@@QEAAHAEBV?$vector@VMemory@cl@@V?$allocator@VMemory@cl@@@std@@@std@@_KPEBV?$vector@VEvent@cl@@V?$allocator@VEvent@cl@@@std@@@4@PEAVEvent@2@@Z</DECORATED><FUNCLINE>6291</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6298</LINE><COLUMN>17</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6300</LINE><COLUMN>14</COLUMN><KEYEVENT><ID>1</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'localMemObjects' is a 0 byte array</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6301</LINE><COLUMN>17</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6301</LINE><COLUMN>26</COLUMN><KEYEVENT><ID>2</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'i&lt;(int)memObjects.size()')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6302</LINE><COLUMN>31</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6301</LINE><COLUMN>52</COLUMN><KEYEVENT><ID>3</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'i' may equal 1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6301</LINE><COLUMN>26</COLUMN><KEYEVENT><ID>4</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Continue this loop, (assume 'i&lt;(int)memObjects.size()')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6302</LINE><COLUMN>31</COLUMN><KEYEVENT><ID>5</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'i' is an In/Out argument to 'std::vector&lt;cl::Memory,std::allocator&lt;cl::Memory&gt; &gt;::[]' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1211)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6302</LINE><COLUMN>31</COLUMN><KEYEVENT><ID>6</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>Invalid write to 'localMemObjects', (outside its writable range)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6379</LINE><COLUMN>30</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::CommandQueue::enqueueNativeKernel</FUNCTION><DECORATED>?enqueueNativeKernel@CommandQueue@cl@@QEBAHP6AXPEAX@ZU?$pair@PEAX_K@std@@PEBV?$vector@VMemory@cl@@V?$allocator@VMemory@cl@@@std@@@4@PEBV?$vector@PEBXV?$allocator@PEBX@std@@@4@PEBV?$vector@VEvent@cl@@V?$allocator@VEvent@cl@@@std@@@4@PEAVEvent@2@@Z</DECORATED><FUNCLINE>6370</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6384</LINE><COLUMN>24</COLUMN></SFA><DEFECTCODE>6386</DEFECTCODE><DESCRIPTION>Buffer overrun while writing to 'mems':  the writable size is 'mem_objects-&gt;size()*sizeof(_cl_mem *)' bytes, but '16' bytes might be written.</DESCRIPTION><FUNCTION>cl::CommandQueue::enqueueNativeKernel</FUNCTION><DECORATED>?enqueueNativeKernel@CommandQueue@cl@@QEBAHP6AXPEAX@ZU?$pair@PEAX_K@std@@PEBV?$vector@VMemory@cl@@V?$allocator@VMemory@cl@@@std@@@4@PEBV?$vector@PEBXV?$allocator@PEBX@std@@@4@PEBV?$vector@VEvent@cl@@V?$allocator@VEvent@cl@@@std@@@4@PEAVEvent@2@@Z</DECORATED><FUNCLINE>6370</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6378</LINE><COLUMN>15</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6382</LINE><COLUMN>17</COLUMN><KEYEVENT><ID>1</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'mems' may be NULL (Enter this branch)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6383</LINE><COLUMN>30</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6383</LINE><COLUMN>39</COLUMN><KEYEVENT><ID>2</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'i&lt;mem_objects-&gt;size()')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6384</LINE><COLUMN>24</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6383</LINE><COLUMN>63</COLUMN><KEYEVENT><ID>3</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'i' may equal 1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6383</LINE><COLUMN>39</COLUMN><KEYEVENT><ID>4</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Continue this loop, (assume 'i&lt;mem_objects-&gt;size()')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>6384</LINE><COLUMN>24</COLUMN><KEYEVENT><ID>5</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>Invalid write to 'mems', (outside its writable range)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1171</LINE><COLUMN>64</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::detail::getInfoHelper</FUNCTION><DECORATED>??$getInfoHelper@U?$GetInfoFunctor0@P6AHPEAU_cl_context@@I_KPEAXPEA_K@ZPEAU1@@detail@cl@@VDevice@3@@detail@cl@@YAHU?$GetInfoFunctor0@P6AHPEAU_cl_context@@I_KPEAXPEA_K@ZPEAU1@@01@IPEAV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@HPEAU_cl_device_id@@@Z</DECORATED><FUNCLINE>1163</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1181</LINE><COLUMN>21</COLUMN></SFA><DEFECTCODE>6385</DEFECTCODE><DESCRIPTION>Reading invalid data from 'value':  the readable size is 'required' bytes, but '16' bytes may be read.</DESCRIPTION><FUNCTION>cl::detail::getInfoHelper</FUNCTION><DECORATED>??$getInfoHelper@U?$GetInfoFunctor0@P6AHPEAU_cl_context@@I_KPEAXPEA_K@ZPEAU1@@detail@cl@@VDevice@3@@detail@cl@@YAHU?$GetInfoFunctor0@P6AHPEAU_cl_context@@I_KPEAXPEA_K@ZPEAU1@@01@IPEAV?$vector@VDevice@cl@@V?$allocator@VDevice@cl@@@std@@@std@@HPEAU_cl_device_id@@@Z</DECORATED><FUNCLINE>1163</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1165</LINE><COLUMN>13</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1166</LINE><COLUMN>11</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1167</LINE><COLUMN>12</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1171</LINE><COLUMN>24</COLUMN><KEYEVENT><ID>1</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'value' is an array</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1172</LINE><COLUMN>8</COLUMN><KEYEVENT><ID>2</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'value' is an In/Out argument to 'cl::detail::GetInfoFunctor0&lt;int (__cdecl*)(_cl_context *,unsigned int,unsigned __int64,void *,unsigned __int64 *),_cl_context *&gt;::()' (declared on line 1575)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1173</LINE><COLUMN>12</COLUMN><KEYEVENT><ID>3</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Skip this branch, (assume 'err!=0' is false)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1177</LINE><COLUMN>13</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1178</LINE><COLUMN>17</COLUMN><KEYEVENT><ID>4</ID><KIND>declaration</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'value' is an Output from 'std::vector&lt;cl::Device,std::allocator&lt;cl::Device&gt; &gt;::assign' (declared at c:\program files (x86)\microsoft visual studio 14.0\vc\include\vector:1320)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1179</LINE><COLUMN>18</COLUMN></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1179</LINE><COLUMN>27</COLUMN><KEYEVENT><ID>5</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'i&lt;elements')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1181</LINE><COLUMN>21</COLUMN><KEYEVENT><ID>6</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Skip this branch, (assume 'value[i]!=0' is false)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1179</LINE><COLUMN>40</COLUMN><KEYEVENT><ID>7</ID><KIND>declaration</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'i' may equal 1</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1179</LINE><COLUMN>27</COLUMN><KEYEVENT><ID>8</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Continue this loop, (assume 'i&lt;elements')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1181</LINE><COLUMN>21</COLUMN><KEYEVENT><ID>9</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Skip this branch, (assume 'value[i]!=0' is false)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1181</LINE><COLUMN>21</COLUMN><KEYEVENT><ID>10</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>Invalid read from 'value', (outside its readable range)</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\program files (x86)\intel\opencl sdk\5.3\include\cl\</FILEPATH><FILENAME>cl.hpp</FILENAME><LINE>1146</LINE><COLUMN>26</COLUMN></SFA><DEFECTCODE>6255</DEFECTCODE><DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION><FUNCTION>cl::detail::getInfoHelper</FUNCTION><DECORATED>??$getInfoHelper@U?$GetInfoFunctor0@P6AHPEAU_cl_program@@I_KPEAXPEA_K@ZPEAU1@@detail@cl@@_K@detail@cl@@YAHU?$GetInfoFunctor0@P6AHPEAU_cl_program@@I_KPEAXPEA_K@ZPEAU1@@01@IPEAV?$vector@_KV?$allocator@_K@std@@@std@@J@Z</DECORATED><FUNCLINE>1138</FUNCLINE><PATH/></DEFECT></DEFECTS>